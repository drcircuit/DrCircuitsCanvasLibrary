name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run build
        run: npm run build
        
      - name: Run tests with detailed output
        id: test_run
        run: |
          echo "Running tests with Node.js ${{ matrix.node-version }}"
          
          # Create output directory for test results
          mkdir -p test-results
          
          # Run tests and capture output, preserving exit code
          set +e
          npm test > test-results/test-output.txt 2>&1
          TEST_EXIT_CODE=$?
          set -e
          
          # Run tests with JSON output for structured data
          node tests/run-tests.js --json --output=test-results/test-results.json || true
          
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Generate test summary for GitHub from JSON output
          echo "## Test Results Summary" > test-results/test-summary.md
          echo "**Node.js Version:** ${{ matrix.node-version }}" >> test-results/test-summary.md
          echo "**Test Exit Code:** $TEST_EXIT_CODE" >> test-results/test-summary.md
          echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> test-results/test-summary.md
          echo "" >> test-results/test-summary.md
          
          # Extract data from JSON if available
          if [ -f test-results/test-results.json ]; then
            echo "### Test Statistics" >> test-results/test-summary.md
            echo "- **Total Tests:** $(jq -r '.summary.totalTests' test-results/test-results.json)" >> test-results/test-summary.md
            echo "- **Passed:** $(jq -r '.summary.passedTests' test-results/test-results.json)" >> test-results/test-summary.md
            echo "- **Failed:** $(jq -r '.summary.failedTests' test-results/test-results.json)" >> test-results/test-summary.md
            echo "- **Success Rate:** $(jq -r '.summary.successRate' test-results/test-results.json)%" >> test-results/test-summary.md
            echo "- **Duration:** $(jq -r '.summary.totalDuration' test-results/test-results.json)ms" >> test-results/test-summary.md
            echo "" >> test-results/test-summary.md
            
            # Add performance metrics
            echo "### Performance Metrics" >> test-results/test-summary.md
            echo "- **Average Duration:** $(jq -r '.performance.averageDuration' test-results/test-results.json)ms" >> test-results/test-summary.md
            echo "- **Fastest Test:** $(jq -r '.performance.fastestTest.file' test-results/test-results.json) ($(jq -r '.performance.fastestTest.duration' test-results/test-results.json)ms)" >> test-results/test-summary.md
            echo "- **Slowest Test:** $(jq -r '.performance.slowestTest.file' test-results/test-results.json) ($(jq -r '.performance.slowestTest.duration' test-results/test-results.json)ms)" >> test-results/test-summary.md
          fi
          
          # Exit with the same code as the test run
          exit $TEST_EXIT_CODE
          
      - name: Generate workflow metadata
        if: always()
        run: |
          # Create workflow metadata JSON
          cat > test-results/workflow-metadata.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "node_version": "${{ matrix.node-version }}",
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "test_exit_code": "${{ steps.test_run.outputs.test_exit_code }}",
            "test_passed": ${{ steps.test_run.outputs.test_exit_code == '0' }}
          }
          EOF
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: test-results/
          retention-days: 30
          
      - name: Comment test results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summary = fs.readFileSync('test-results/test-summary.md', 'utf8');
              const testPassed = '${{ steps.test_run.outputs.test_exit_code }}' === '0';
              
              const header = testPassed 
                ? '✅ Tests Passed' 
                : '❌ Tests Failed';
                
              const body = `### ${header} (Node.js ${{ matrix.node-version }})
              
              ${summary}
              
              <details>
              <summary>View full test output</summary>
              
              \`\`\`
              ${fs.readFileSync('test-results/test-output.txt', 'utf8').slice(-2000)}
              \`\`\`
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Error posting comment:', error.message);
            }
            
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install coverage tools
        run: npm install --save-dev c8
        
      - name: Run tests with coverage
        run: |
          # Create coverage directory
          mkdir -p coverage
          
          # Run tests with c8 coverage
          npx c8 --reporter=text --reporter=lcov --reporter=json --output-dir=coverage npm test
          
      - name: Generate coverage summary
        run: |
          # Create coverage summary for artifacts
          echo "# Coverage Report" > coverage/coverage-summary.md
          echo "**Generated:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> coverage/coverage-summary.md
          echo "**Commit:** ${{ github.sha }}" >> coverage/coverage-summary.md
          echo "" >> coverage/coverage-summary.md
          
          # Add coverage stats if available
          if [ -f coverage/coverage-summary.json ]; then
            echo "## Coverage Statistics" >> coverage/coverage-summary.md
            echo "\`\`\`json" >> coverage/coverage-summary.md
            cat coverage/coverage-summary.json >> coverage/coverage-summary.md
            echo "\`\`\`" >> coverage/coverage-summary.md
          fi
          
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('coverage/coverage-summary.md')) {
                const summary = fs.readFileSync('coverage/coverage-summary.md', 'utf8');
                
                const body = `### 📊 Code Coverage Report
                
                ${summary}
                
                [View detailed coverage report in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.log('Error posting coverage comment:', error.message);
            }

  test-results-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results
          
      - name: Generate comprehensive test report
        run: |
          echo "# DrCircuitsCanvasLibrary Test Report" > test-report.md
          echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> test-report.md
          echo "**Commit:** ${{ github.sha }}" >> test-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> test-report.md
          echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> test-report.md
          echo "" >> test-report.md
          
          # Summary of all Node.js versions tested
          echo "## Test Results by Node.js Version" >> test-report.md
          echo "" >> test-report.md
          
          # Process each Node.js version result
          for dir in all-results/test-results-node-*; do
            if [ -d "$dir" ]; then
              node_version=$(basename "$dir" | sed 's/test-results-node-//')
              echo "### Node.js $node_version" >> test-report.md
              
              if [ -f "$dir/test-summary.md" ]; then
                cat "$dir/test-summary.md" >> test-report.md
              fi
              echo "" >> test-report.md
            fi
          done
          
          # Add coverage information if available
          if [ -d "all-results/coverage-reports" ]; then
            echo "## Coverage Report" >> test-report.md
            if [ -f "all-results/coverage-reports/coverage-summary.md" ]; then
              cat "all-results/coverage-reports/coverage-summary.md" >> test-report.md
            fi
          fi
          
      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: test-report.md
          retention-days: 90
          
      - name: Set job status based on test results
        run: |
          # Check if any tests failed
          failed=false
          
          for dir in all-results/test-results-node-*; do
            if [ -f "$dir/workflow-metadata.json" ]; then
              test_passed=$(jq -r '.test_passed' "$dir/workflow-metadata.json")
              if [ "$test_passed" = "false" ]; then
                failed=true
                break
              fi
            fi
          done
          
          if [ "$failed" = "true" ]; then
            echo "❌ One or more test suites failed"
            exit 1
          else
            echo "✅ All test suites passed"
            exit 0
          fi
